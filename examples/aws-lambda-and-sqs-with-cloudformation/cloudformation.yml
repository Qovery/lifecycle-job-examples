AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SQS and Lambda example.'
Resources:
  TaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !Sub ${DeadLetterQueue.Arn}
        maxReceiveCount: 10
  DeadLetterQueue:
    Type: AWS::SQS::Queue
  ConsumerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                Resource: !Sub ${TaskQueue.Arn}
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Sub ${WorkerLambda.Arn}
  ConsumerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./consumer
      Handler: index.handler
      MemorySize: 128
      Role: !Sub ${ConsumerLambdaRole.Arn}
      Runtime: nodejs18.x
      Timeout: 60
      Environment:
        Variables:
          TASK_QUEUE_URL: !Ref TaskQueue
          WORKER_LAMBDA_NAME: !Ref WorkerLambda
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  WorkerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                Resource: !Sub ${TaskQueue.Arn}
  WorkerLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./worker
      Handler: index.handler
      MemorySize: 128
      Role: !Sub ${WorkerLambdaRole.Arn}
      Runtime: nodejs18.x
      Timeout: 60
      Environment:
        Variables:
          TASK_QUEUE_URL: !Ref TaskQueue
Outputs:
  TasksQueue:
    Description: TaskQueue value
    Value: !GetAtt TaskQueue.Arn
